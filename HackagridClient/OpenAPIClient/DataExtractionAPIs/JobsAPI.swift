//
// JobsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



class JobsAPI {
    /**
     Verifica o status atual do job
     
     - parameter jobId: (path) ID numérico do job para verificação da conclusão do processamento.. 
     - parameter endUserId: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func checkJob(jobId: String, endUserId: String, completion: @escaping ((_ data: Processing?,_ error: Error?) -> Void)) {
        checkJobWithRequestBuilder(jobId: jobId, endUserId: endUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Verifica o status atual do job
     - GET /job/check/{jobId}
     - Verifica o status atual do job
     - API Key:
       - type: apiKey X-Api-Key 
       - name: GatewayAPIKey
     - parameter jobId: (path) ID numérico do job para verificação da conclusão do processamento.. 
     - parameter endUserId: (header)  
     - returns: RequestBuilder<Processing> 
     */
    class func checkJobWithRequestBuilder(jobId: String, endUserId: String) -> RequestBuilder<Processing> {
        var path = "/job/check/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "endUserId": endUserId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Processing>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Solicita a criação de um novo Job
     
     - parameter endUserId: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func createJob(endUserId: String, completion: @escaping ((_ data: CreateJobResponse?,_ error: Error?) -> Void)) {
        createJobWithRequestBuilder(endUserId: endUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Solicita a criação de um novo Job
     - POST /job/create
     - Cria um novo Job de extração de dados
     - API Key:
       - type: apiKey X-Api-Key 
       - name: GatewayAPIKey
     - parameter endUserId: (header)  
     - returns: RequestBuilder<CreateJobResponse> 
     */
    class func createJobWithRequestBuilder(endUserId: String) -> RequestBuilder<CreateJobResponse> {
        let path = "/job/create"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "endUserId": endUserId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CreateJobResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Recupera o resultado do processamento.
     
     - parameter jobId: (path) ID numérico do job para recuperação dos dados resultantes do processamento. 
     - parameter endUserId: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getJobResult(jobId: String, endUserId: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getJobResultWithRequestBuilder(jobId: jobId, endUserId: endUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Recupera o resultado do processamento.
     - GET /job/result/{jobId}
     - Recupera o resultado do processamento.
     - API Key:
       - type: apiKey X-Api-Key 
       - name: GatewayAPIKey
     - parameter jobId: (path) ID numérico do job para recuperação dos dados resultantes do processamento. 
     - parameter endUserId: (header)  
     - returns: RequestBuilder<Any> 
     */
    class func getJobResultWithRequestBuilder(jobId: String, endUserId: String) -> RequestBuilder<Data> {
        var path = "/job/result/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "endUserId": endUserId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Recupera o resultado do processamento em formato PDF.
     
     - parameter jobId: (path) ID numérico do job para recuperação dos dados resultantes do processamento. 
     - parameter endUserId: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getJobResultAsPDF(jobId: String, endUserId: String, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getJobResultAsPDFWithRequestBuilder(jobId: jobId, endUserId: endUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Recupera o resultado do processamento em formato PDF.
     - GET /job/result/pdf/{jobId}
     - Recupera o resultado do processamento em formato PDF
     - API Key:
       - type: apiKey X-Api-Key 
       - name: GatewayAPIKey
     - parameter jobId: (path) ID numérico do job para recuperação dos dados resultantes do processamento. 
     - parameter endUserId: (header)  
     - returns: RequestBuilder<URL> 
     */
    class func getJobResultAsPDFWithRequestBuilder(jobId: String, endUserId: String) -> RequestBuilder<URL> {
        var path = "/job/result/pdf/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "endUserId": endUserId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Inicia um job caso exista
     
     - parameter jobId: (path) ID numérico do job para iniciar o processamento. 
     - parameter endUserId: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func startJob(jobId: String, endUserId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        startJobWithRequestBuilder(jobId: jobId, endUserId: endUserId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Inicia um job caso exista
     - PUT /job/start/{jobId}
     - Inicia um job caso exista
     - API Key:
       - type: apiKey X-Api-Key 
       - name: GatewayAPIKey
     - parameter jobId: (path) ID numérico do job para iniciar o processamento. 
     - parameter endUserId: (header)  
     - returns: RequestBuilder<Void> 
     */
    class func startJobWithRequestBuilder(jobId: String, endUserId: String) -> RequestBuilder<Void> {
        var path = "/job/start/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "endUserId": endUserId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Envia (upload) documento (arquivo) para o job.
     
     - parameter endUserId: (header)  
     - parameter jobId: (path) ID numérico do job para o qual o arquivo está sendo enviado. 
     - parameter docType: (path) Tipo do documento que será feito o upload(1-CNH, 2-RG, 3-COMPROVANTE RENDA, 4-COMPROVANTE RESIDENCIA, 5-CRLV). 
     - parameter file: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func uploadDocument(endUserId: String, jobId: String, docType: Int, file: URL? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadDocumentWithRequestBuilder(endUserId: endUserId, jobId: jobId, docType: docType, file: file).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Envia (upload) documento (arquivo) para o job.
     - PUT /job/upload/{jobId}/{docType}
     - Envia (upload) documento (arquivo) para o job.
     - API Key:
       - type: apiKey X-Api-Key 
       - name: GatewayAPIKey
     - parameter endUserId: (header)  
     - parameter jobId: (path) ID numérico do job para o qual o arquivo está sendo enviado. 
     - parameter docType: (path) Tipo do documento que será feito o upload(1-CNH, 2-RG, 3-COMPROVANTE RENDA, 4-COMPROVANTE RESIDENCIA, 5-CRLV). 
     - parameter file: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    class func uploadDocumentWithRequestBuilder(endUserId: String, jobId: String, docType: Int, file: URL? = nil) -> RequestBuilder<Void> {
        var path = "/job/upload/{jobId}/{docType}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let docTypePreEscape = "\(APIHelper.mapValueToPathItem(docType))"
        let docTypePostEscape = docTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{docType}", with: docTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "File": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "endUserId": endUserId
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
